module Main where

import Daml.Script
import Cash qualified
import Security qualified
import Trading.Service qualified as DvPService 
import Trading.Model qualified as DvPModel

data SetupData = SetupData 
  with 
    buyer: Party 
    seller: Party 
    bank: Party 
    custodian: Party 
    issuingAgent: Party 
    dvpOperator: Party 
    buyerCashCid: ContractId Cash.Holding 
    sellerSecurityCid: ContractId Security.Holding 
    buyerTradingServiceCid: ContractId DvPService.Service 
    sellerTradingServiceCid: ContractId DvPService.Service 

setup : Script SetupData
setup = script do

  [buyer, seller, bank, custodian, issuingAgent, dvpOperator] <- mapA (\(partyName, userName) -> do 
    party <- allocatePartyWithHint partyName $ PartyIdHint partyName 
    uid <- validateUserId userName
    createUser (User uid (Some party)) [CanActAs party]
    return party) [
      ("BuySide", "buy_side"),
      ("SellSide", "sell_side"),
      ("Bank", "bank"),
      ("Custodian", "custodian"), 
      ("Issuer", "issuer"),
      ("Operator", "operator")]

  buyerCashCid <- submit bank $ createCmd Cash.Holding 
    with 
      owner = buyer
      bank = bank 
      amount = 1_000_000_000.00

  security <- submit custodian $ createCmd Security.Security 
    with 
      custodian 
      issuingAgent 
      isin = "Foo123"

  holding <- submit issuingAgent $ exerciseCmd security Security.Issue 
    with 
      amount = 100.00 

  sellerSecurityCid <- submit issuingAgent $ exerciseCmd holding Security.Transfer 
    with 
      newOwner = seller

  buyerTradingServiceCid <- submit dvpOperator $ createCmd DvPService.Service 
    with 
      customer = buyer 
      provider = dvpOperator 

  sellerTradingServiceCid <- submit dvpOperator $ createCmd DvPService.Service 
    with 
      customer = seller 
      provider = dvpOperator 

  pure SetupData with ..

example1 : Script ()
example1 = script do

  SetupData {..} <- setup 

  sellerOfferCid <- submit seller $ exerciseCmd sellerTradingServiceCid DvPService.CreateSellerOffer 
    with 
      securityAmount = 80.00
      cashAmount = 80_000_000.00
      securityHoldingCid = sellerSecurityCid
      ..

  fundedDeal <- submit buyer $ exerciseCmd buyerTradingServiceCid DvPService.AcceptSellerOffer 
    with 
      cashHoldingCid = buyerCashCid
      ..

  submit buyer $ exerciseCmd fundedDeal DvPModel.AtomicallySwap with buyerOrSeller = buyer

  return ()